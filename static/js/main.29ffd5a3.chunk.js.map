{"version":3,"sources":["Form/index.js","List/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","value","placeholder","onChange","target","List","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","extraTitle","body","Header","title","Conatiner","children","App","tasksFromStorage","JSON","parse","localStorage","getItem","setHideDone","setTasks","setItem","stringify","Container","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29ffd5a3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport \"./style.css\";\n\nconst Form = ({ addNewTask }) => {\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n\n    const trimmedNewTaskContent = newTaskContent.trim();\n\n    if (!trimmedNewTaskContent) {\n      return;\n    }\n\n    addNewTask(trimmedNewTaskContent);\n    setNewTaskContent(\"\");\n  };\n\n  return (\n    <form\n      className=\"form\"\n      onSubmit={onFormSubmit}\n    >\n      <div className=\"form__container\">\n        <input\n          value={newTaskContent}\n          className=\" form__input\"\n          placeholder=\"Co jest do zrobienia?\"\n          onChange={({ target }) => setNewTaskContent(target.value)}\n        />\n        <button className=\"form__button\">Dodaj zadanie</button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;","import React from 'react';\nimport \"./style.css\";\n\nconst List = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\n  <ul className=\"list\">\n    {tasks.map(task => (\n      <li\n      key={task.id}\n      >\n        <span className={`list__item ${task.done && hideDone ? \" list__item--hidden\" : \"\"}`}>\n          <button\n            className=\"list__buttonToggle\"\n            onClick={() => toggleTaskDone(task.id)}\n          >\n            {task.done ? \"‚úî\" : \"\"}\n          </button>\n          <span\n            className={`list__text ${task.done ? \"list__text--done\" : \"\"}`}\n          >\n            {task.content}\n          </span>\n          <button\n            className=\"list__buttonRemove\"\n            onClick={() => removeTask(task.id)}\n          >üóë</button>\n        </span>\n      </li>\n    ))}\n  </ul>\n\n);\n\nexport default List;","import React from 'react';\nimport \"./style.css\";\n\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone}) => {\n  if (tasks.length === 0) {\n    return (\n      <div className=\"buttons__container\">\n        <h2 className=\"section__header\">Lista zada≈Ñ</h2>\n        <button className=\"buttons__button--none\" disabled></button>\n        <button className=\"buttons__button--none\" disabled></button>\n      </div>\n    )\n  }\n  return (\n    <div className=\"buttons__container\">\n      <h2 className=\"section__header\">Lista zada≈Ñ</h2>\n      <button\n        onClick={toggleHideDone}\n        className=\"buttons__button\"\n      >\n        {hideDone ? \"Poka≈º\" : \"Ukryj\"} uko≈Ñczone\n        </button>\n      <button\n        className=\"buttons__button\"\n        disabled={tasks.every(({ done }) => done)}\n        onClick={setAllDone}\n      >\n        Uko≈Ñcz wszystkie\n          </button>\n    </div>\n  )\n};\n\nexport default Buttons;\n","import React from 'react';\nimport \"./style.css\";\n\nconst Section = ({ extraTitle, body }) => {\n  if (extraTitle) {\n    return (\n      <section className=\"section\">\n        <h2 className=\"section__header\">{extraTitle}</h2>\n        <div className=\"section__body\">\n          {body}\n        </div>\n      </section>\n    )\n  }\n  return (\n      <section className=\"section\">\n        <div className=\"section__body\">\n          {body}\n        </div>\n      </section>\n  )\n};\n\nexport default Section;","import React from 'react';\n\nconst Header = ({ title }) => (\n      <header>\n        <h1 className=\"header\">{title}</h1>\n      </header>\n\n);\nexport default Header;","import React from 'react';\nimport \"./style.css\";\n\nconst Conatiner = ({children}) => (\n  <main className=\"container\">\n    {children}\n  </main>\n)\n\nexport default Conatiner;","import React, { useState } from 'react';\nimport Form from './Form';\nimport List from './List';\nimport Buttons from './Buttons'\nimport Section from './Section'\nimport Header from './Header'\nimport Container from './Container'\n\nfunction App() {\n\n  const tasksFromStorage = JSON.parse(localStorage.getItem(\"tasks\"));\n\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState([...tasksFromStorage]);\n\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  }\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done }\n      };\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (newTaskContent) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content: newTaskContent,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ]);\n  };\n\n  return (\n\n    <Container>\n\n      <Header title=\"Lista zada≈Ñ\" />\n\n      <Section extraTitle=\"Dodaj nowe zadanie\" body={<Form addNewTask={addNewTask} />} />\n\n      <Section body={\n        <>\n          <Buttons tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n          <List\n            tasks={tasks} hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        </>\n      }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}